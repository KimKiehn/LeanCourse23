import LeanCourse.Common
open Real Function
noncomputable section
set_option linter.unusedVariables false


/- # Last Lecture -/

/-
We went over the quantifiers `‚àÄ` (for all) and `‚àÉ` (exists), and the connectives
`‚àß` (and), `‚à®` (or), `‚Üí` (implies), `‚Üî` (if and only if).
For each of these we saw how to prove them, and how to use an assumption that states this.
-/







/- # Today: Logic (continued) and sets

We cover sections 3.3, 3.6 and 4.1 from Mathematics in Lean. -/

/-
We will discuss negation `¬¨` (not), classical logic, sequences and sets.
-/


/- ## Negation

The negation `¬¨ A` just means `A ‚Üí False`, where `False` is a specific false statement.
We can use the same tactics as for implication:
`intro` to prove a negation, and `apply` to use one. -/

example {p : Prop} (h : p) : ¬¨ ¬¨ p := by {
  intro h1
  exact h1 h
}

example {Œ± : Type*} {p : Œ± ‚Üí Prop} : ¬¨ (‚àÉ x, p x) ‚Üî ‚àÄ x, ¬¨ p x := by {
  constructor
  ¬∑ intro h x hx
    apply h
    exact ‚ü®x,hx ‚ü©
  ¬∑ intro h h1
    obtain ‚ü®x, hx ‚ü©:=h1
    specialize h x hx
    exact h
}

/- We can use `exfalso` to use the fact that everything follows from `False`:
ex falso quod libet -/
example {p : Prop} (h : ¬¨ p) : p ‚Üí 0 = 1 := by {
  intro h1
  specialize h h1
  exfalso
  exact h
}

/- `contradiction` proves any goal when two hypotheses are contradictory. -/

example {p : Prop} (h : ¬¨ p) : p ‚Üí 0 = 1 := by {
  intro h1
  contradiction
}






/-
We can use classical reasoning (with the law of the excluded middle) using the following tactics.

* `by_contra h` start a proof by contradiction.
* `by_cases h : p` to start a proof by cases on statement `p`.
* `push_neg` to push negations inside quantifiers and connectives.
-/

example {p : Prop} (h : ¬¨ ¬¨ p) : p := by {
  by_contra h1
  exact h h1
}

example (p q : Prop) (h : ¬¨ q ‚Üí ¬¨ p) : p ‚Üí q := by {
  intro hp
  by_contra h1

  exact h h1 hp
}

example (p q r : Prop) (h1 : p ‚Üí r) (h2 : ¬¨ p ‚Üí r) : r := by {
  by_cases hp: p
  ¬∑ exact h1 hp
  ¬∑ exact h2 hp
}

example {Œ± : Type*} {p : Œ± ‚Üí Prop} : ¬¨ (‚àÉ x, p x) ‚Üî ‚àÄ x, ¬¨ p x := by {
  push_neg
  rfl
}



/-- The sequence `u` of real numbers converges to `l`.
`‚àÄ Œµ > 0, ...` means `‚àÄ Œµ, Œµ > 0 ‚Üí ...` -/
def SequentialLimit (u : ‚Ñï ‚Üí ‚Ñù) (l : ‚Ñù) : Prop :=
  ‚àÄ Œµ > 0, ‚àÉ N, ‚àÄ n ‚â• N, |u n - l| < Œµ

example (u : ‚Ñï ‚Üí ‚Ñù) (l : ‚Ñù) :
    ¬¨ SequentialLimit u l ‚Üî ‚àÉ Œµ > 0, ‚àÄ N, ‚àÉ n ‚â• N, |u n - l| ‚â• Œµ := by {
      rw[SequentialLimit]
      push_neg
      rfl
    }

lemma sequentialLimit_unique (u : ‚Ñï ‚Üí ‚Ñù) (l l' : ‚Ñù) :
    SequentialLimit u l ‚Üí SequentialLimit u l' ‚Üí l = l' := by {
      intro h1 h2
      by_contra h3
      have h4 :|l - l'| > 0
      ¬∑ apply abs_pos.2
        apply sub_ne_zero.2
        exact h3

      rw[SequentialLimit] at h1 h2
      specialize h1 (|l-l'|/2) (by linarith)
      obtain ‚ü®N,hN ‚ü©:=h1
      obtain ‚ü®N', hN' ‚ü©:= h2  (|l-l'|/2) (by linarith)
      let N‚ÇÄ := max N N'
      specialize hN N‚ÇÄ (by exact Nat.le_max_left N N')
      specialize hN' N‚ÇÄ (by exact Nat.le_max_right N N')
      have : |l-l'| < |l-l'|:= by
        calc |l-l'|
          =|l-u N‚ÇÄ +(u N‚ÇÄ -l')|:= by ring
         _‚â§ |l- u N‚ÇÄ| +|u N‚ÇÄ -l'| := by exact abs_add (l - u N‚ÇÄ) (u N‚ÇÄ - l')
         _= |u N‚ÇÄ -l| + |u N‚ÇÄ -l'|:= by rw [@abs_sub_comm]
         _< |l-l'|:= by linarith
      linarith
    }


/- ## Exercises -/


/- Prove the following without using `push_neg` or lemmas from the library.
You will need to use `by_contra` in the proof. -/
example {Œ± : Type*} (p : Œ± ‚Üí Prop) : (‚àÉ x, p x) ‚Üî (¬¨ ‚àÄ x, ¬¨ p x) := by {
  constructor
  ¬∑ intro h1 h2
    obtain ‚ü®x, hx ‚ü©:= h1
    specialize h2 x
    exact h2 hx
  ¬∑ intro h1
    by_contra h2
    apply h1
    intro x
    by_contra h4
    apply h2
    use x
}

lemma convergesTo_const (a : ‚Ñù) : SequentialLimit (fun n : ‚Ñï ‚Ü¶ a) a := by {
  rw[SequentialLimit]
  intro Œµ h1
  use 0
  simp
  exact h1
}

/- The next exercise is harder, and you will probably not finish it during class. -/
lemma SequentialLimit.add {s t : ‚Ñï ‚Üí ‚Ñù} {a b : ‚Ñù}
    (hs : SequentialLimit s a) (ht : SequentialLimit t b) :
    SequentialLimit (fun n ‚Ü¶ s n + t n) (a + b) := by {
      intro Œµ h1
      have h2: (Œµ/2)>0 := by exact half_pos h1
      obtain ‚ü®N1, hN1 ‚ü©:= hs (Œµ/2) h2
      obtain ‚ü®N2, hN2 ‚ü©:= ht (Œµ/2) h2
      let N := max N1 N2
      use N
      intro n hn
      specialize hN1 n (by apply le_trans (Nat.le_max_left N1 N2) hn)
      specialize hN2 n (by apply le_trans (Nat.le_max_right N1 N2) hn)
      simp
      calc |s n +t n -(a+b)|= |(s n -a)+ (t n -b)|:= by ring
        _‚â§ |s n -a|+|t n -b|:= by exact abs_add (s n - a) (t n - b)
        _<  Œµ:=by linarith
    }







/- # Sets

In set theory you can make sets with arbitrary elements.
In Lean, all sets have to be sets of elements from a specific type.
-/

#check Set ‚Ñï
#check Set ‚Ñù

variable {Œ± Œ≤ Œπ : Type*} (x : Œ±) (s t u : Set Œ±)

#check x ‚àà s       -- \in or \mem
#check x ‚àâ s       -- \notin
#check s ‚äÜ t       -- \sub
#check s ‚äÇ t       -- \ssub


#check s ‚à© t       -- \inter or \cap
#check s ‚à™ t       -- \union or \cup
#check s \ t       -- it is the normal symbol `\` on your keyboard,
                   -- but you have to write `\\` or `\ ` to enter it
#check s·∂ú          -- \compl or \^c
#check (‚àÖ : Set Œ±) -- \empty
#check (Set.univ : Set Œ±)

open Set

#check (univ : Set Œ±)






/- Showing that `x` is an elements of `s ‚à© t`, `s ‚à™ t` or `s·∂ú`
corresponds by definition to conjunction, disjunction or negation. -/

#check mem_inter_iff
#check mem_union
#check mem_compl_iff

/- There are various ways to prove this:
* use lemma `mem_inter_iff`
* use `simp`
* directly apply `constructor`
* give a direct proof: `‚ü®xs, xt‚ü©`
-/
example (hxs : x ‚àà s) (hxt : x ‚àà t) : x ‚àà s ‚à© t := by {

  exact ‚ü®hxs, hxt ‚ü©
}


example (hxs : x ‚àà s) : x ‚àà s ‚à™ t := by  {
  simp [hxs]
}









/- `s ‚äÜ t` means that for every element `x` in `s`, `x` is also an element in `t`. -/

#check subset_def

example : s ‚à© t ‚äÜ s ‚à© (t ‚à™ u) := by {
  intro x hx
  constructor
  ¬∑ exact mem_of_mem_inter_left hx
  ¬∑ left
    exact hx.2

}

/- you can also prove it at thge level of sets, without talking about elements. -/
example : s ‚à© t ‚äÜ s ‚à© (t ‚à™ u) := by {
  gcongr
  exact subset_union_left t u
}





/- ## Proving two Sets are equal

You can prove that two sets are equal by applying `subset_antisymm` or using the `ext` tactic.
-/
#check (subset_antisymm : s ‚äÜ t ‚Üí t ‚äÜ s ‚Üí s = t)

example : s ‚à© t = t ‚à© s := by  {
  ext x
  constructor
  ¬∑ intro hx
    exact ‚ü® hx.2, hx.1‚ü©
  ¬∑ intro hx
    obtain ‚ü®h1x, h2x‚ü©:= hx
    constructor
    ¬∑ exact h2x
    ¬∑ exact h1x
}

/- We can also use existing lemmas and `calc`. -/
example : (s ‚à™ t·∂ú) ‚à© t = s ‚à© t := by sorry





/-
# Set-builder notation
-/

def Evens : Set ‚Ñï := {n : ‚Ñï | Even n}

def Odds : Set ‚Ñï := {n | ¬¨ Even n}

example : Evens ‚à™ Odds = univ := by sorry





example : s ‚à© t = {x | x ‚àà s ‚àß x ‚àà t} := by rfl
example : s ‚à™ t = {x | x ‚àà s ‚à® x ‚àà t} := by rfl
example : s \ t = {x | x ‚àà s ‚àß x ‚àâ t} := by rfl
example : s·∂ú = {x | x ‚àâ s} := by rfl
example : (‚àÖ : Set Œ±) = {x | False} := by rfl
example : (univ : Set Œ±) = {x | True} := by rfl

-- alternative notation:
example : s ‚à© t = {x ‚àà s | x ‚àà t} := by rfl


/-
# Other operations on sets
-/

/- We can take power sets of sets. -/
example (s : Set Œ±) : ùí´ s = {t | t ‚äÜ s} := by rfl -- \powerset







/- We can take unions and intersections of families of sets in three different ways:
* Given a family of sets `C : Œπ ‚Üí Set Œ±`
  we can take the union and intersection of `C i`
  as `i` ranges over all elements of `Œπ`.
-/
example (C : Œπ ‚Üí Set Œ±) : ‚ãÉ i : Œπ, C i = {x : Œ± | ‚àÉ i : Œπ, x ‚àà C i} := by ext; simp

example (C : Œπ ‚Üí Set Œ±) : ‚ãÇ i : Œπ, C i = {x : Œ± | ‚àÄ i : Œπ, x ‚àà C i} := by ext; simp

/-
* Given a family of sets `C : Œπ ‚Üí Set Œ±` and `s : Set Œπ`
  we can take the union and intersection of `C i`
  as `i` ranges over all elements in `s`.
-/
example (s : Set Œπ) (C : Œπ ‚Üí Set Œ±) : ‚ãÉ i ‚àà s, C i = {x : Œ± | ‚àÉ i ‚àà s, x ‚àà C i} := by ext; simp

example (s : Set Œπ) (C : Œπ ‚Üí Set Œ±) : ‚ãÇ i ‚àà s, C i = {x : Œ± | ‚àÄ i ‚àà s, x ‚àà C i} := by ext; simp

/-
* Given a collection of sets `C : Set (Set Œ±)`
  we can take the union and intersection of `c`
  for all `c ‚àà C`
-/

example (ùìí : Set (Set Œ±)) : ‚ãÉ‚ÇÄ ùìí = {x : Œ± | ‚àÉ s ‚àà ùìí, x ‚àà s} := by rfl

example (ùìí : Set (Set Œ±)) : ‚ãÇ‚ÇÄ ùìí = {x : Œ± | ‚àÄ s ‚àà ùìí, x ‚àà s} := by rfl



example (C : Œπ ‚Üí Set Œ±) (s : Set Œ±) : s ‚à© (‚ãÉ i, C i) = ‚ãÉ i, (C i ‚à© s) := by sorry


/- We can take images and preimages of sets.

`f ‚Åª¬π' s` is the preimage of `s` under `f`.
`f '' s` is the image of `s` under `f`. -/

example (f : Œ± ‚Üí Œ≤) (s : Set Œ≤) : f ‚Åª¬π' s = { x : Œ± | f x ‚àà s } := by rfl

example (f : Œ± ‚Üí Œ≤) (s : Set Œ±) : f '' s = { y : Œ≤ | ‚àÉ x ‚àà s, f x = y } := by rfl


example {s : Set Œ±} {t : Set Œ≤} {f : Œ± ‚Üí Œ≤} : f '' s ‚äÜ t ‚Üî s ‚äÜ f ‚Åª¬π' t := by sorry
